name: Release VSCode Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extension.outputs.version }}
      name: ${{ steps.extension.outputs.name }}
      filename: ${{ steps.extension.outputs.filename }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --frozen-lockfile

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Build extension
        run: npm run package

      - name: Package extension
        run: vsce package --no-dependencies --out out

      - name: Get extension info
        id: extension
        run: |
          VERSION=$(node -p "require('./package.json').version")
          NAME=$(node -p "require('./package.json').name")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "filename=$NAME-$VERSION.vsix" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: "out/*.vsix"
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-package
          path: out

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          files: out/${{ needs.build.outputs.filename }}
          draft: false
          prerelease: false
